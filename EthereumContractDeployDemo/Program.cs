using Nethereum.Hex.HexTypes;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Web3;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace EthereumContractDeployDemo
{
    class Program
    {
        static void Main(string[] args)
        {
            //account address (if not it must be unlocked first)
            //to be changed with one account with available ETHs
            var sender = "0x627306090abaB3A6e1400e9345bC60c78a8BEf57";           

            //generated by solcjs --abi and solcjs --bin
            string abi = @"[{'constant':true,'inputs':[],'name':'getName','outputs':[{'name':'','type':'string'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':false,'inputs':[{'name':'_name','type':'string'}],'name':'setName','outputs':[],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':true,'inputs':[],'name':'sayHello','outputs':[{'name':'','type':'string'}],'payable':false,'stateMutability':'pure','type':'function'},{'inputs':[],'payable':false,'stateMutability':'nonpayable','type':'constructor'}]";
            string byteCode = "6060604052341561000f57600080fd5b6040805190810160405280600781526020017f4e4f545f534554000000000000000000000000000000000000000000000000008152506000908051906020019061005a929190610060565b50610105565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100a157805160ff19168380011785556100cf565b828001600101855582156100cf579182015b828111156100ce5782518255916020019190600101906100b3565b5b5090506100dc91906100e0565b5090565b61010291905b808211156100fe5760008160009055506001016100e6565b5090565b90565b61038c806101146000396000f300606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806317d7de7c1461005c578063c47f0027146100ea578063ef5fb05b14610118575b600080fd5b341561006757600080fd5b61006f6101a6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100af578082015181840152602081019050610094565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156100f557600080fd5b6101166004808035906020019082018035906020019190919290505061024e565b005b341561012357600080fd5b61012b610264565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016b578082015181840152602081019050610150565b50505050905090810190601f1680156101985780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101ae6102a7565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102445780601f1061021957610100808354040283529160200191610244565b820191906000526020600020905b81548152906001019060200180831161022757829003601f168201915b5050505050905090565b81816000919061025f9291906102bb565b505050565b61026c6102a7565b6040805190810160405280600c81526020017f48656c6c6f20576f726c64210000000000000000000000000000000000000000815250905090565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106102fc57803560ff191683800117855561032a565b8280016001018555821561032a579182015b8281111561032957823582559160200191906001019061030e565b5b509050610337919061033b565b5090565b61035d91905b80821115610359576000816000905550600101610341565b5090565b905600a165627a7a72305820ad8eecaf779fffec6f48abc56849e65d72e74dac844c9a9cf414398549ff6b610029";

            //default ganache default url
            Web3 web3 = new Web3("http://localhost:7545");

            string contractAddress = "";

            Console.WriteLine("Deploy a new contract? (y/n)");
            if (Console.ReadKey().Key == ConsoleKey.Y)
            {
                Console.WriteLine("\nDeploying a new contract...");
                contractAddress = DeployContractAsync(sender, web3, abi, byteCode).Result;
            }
            else {
                Console.WriteLine("\nExisting Contract address: ");
                contractAddress = Console.ReadLine().Trim();
            }

            try
            {
                Console.WriteLine("----------------------------------");

                //calling the contract
                var helloWorld = web3.Eth.GetContract(abi, contractAddress);

                //local call (no transaction)
                var sayHelloFunc = helloWorld.GetFunction("sayHello");
                var result = sayHelloFunc.CallAsync<string>().Result;
                Console.WriteLine($"SayHello: {result}");

                //call setName that change the status (so it needs a transaction)
                var getNameFunc = helloWorld.GetFunction("getName");
                result = getNameFunc.CallAsync<string>().Result;
                Console.WriteLine($"GetName: {result}");

                Console.WriteLine("Insert name: ");
                string name = Console.ReadLine();
                var setNameFunc = helloWorld.GetFunction("setName");
                var setNameReceipt = setNameFunc.SendTransactionAndWaitForReceiptAsync(sender, new HexBigInteger(900000), new HexBigInteger(0), new CancellationTokenSource(), name).Result;
                Console.WriteLine($"SetName (transaction submitted): {setNameReceipt.TransactionHash}");

                result = getNameFunc.CallAsync<string>().Result;
                Console.WriteLine($"GetName: {result}");

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            finally
            {
                Console.WriteLine("Done.");
                Console.ReadLine();
            }
        }

        private static async Task<string> DeployContractAsync(string sender, Web3 web3, string abi, string bytecode)
        {
            //deploy contract
            var gas = new Nethereum.Hex.HexTypes.HexBigInteger(2000000);
            var transactionHash = await web3.Eth.DeployContract.SendRequestAsync(abi, bytecode, sender, gas);

            Console.WriteLine($"Contract deployed, Tx hash: {transactionHash}");

            //wait for the miners to verify the transaction
            Console.WriteLine($"Waiting for the transaction to be mined...");
            var receipt = await web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(transactionHash);
            while (receipt == null)
            {
                Console.WriteLine($"not ready...");
                Thread.Sleep(5000);
                receipt = await web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(transactionHash);
            }
            Console.WriteLine($"Contract address: {receipt.ContractAddress}");

            return receipt.ContractAddress;
            
        }
    }
}
